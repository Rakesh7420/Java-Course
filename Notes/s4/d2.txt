Webapplication
Webservices
MVC
Spring-MVC

Servlet and JSP 

client (browser) <------   Http protocol    --------> server() 


http://www.gmail.com 

https://ipaddress/8080/appname/index.html


jdbc:mysql://localhost:3306/dbname;

client (browser) <-----> WS/APP server

Http protocol:
============

--it is a protocol that contains set of rules and guidelines to get communication bt
http client (browser s/w)  and web-server/application-server.


--In case of WA the http client will be web-browser s/w , whereas in case of WS the 
client could be one of the following:

1.brower s/w
2.Postman s/w
3.swagger s/w
4.angular app
5.react app
6.normal JS using ajax (using fetch api)
7.some other application which is developed in another language (.net, python)
8.another type of java application / microservices


--the client of the WS is basically another type of application only.



way to give any http request:
----------------------------------

https://www.gmail.com

https://ipaddress:port/gmailapp/index.html

by typing in the URL
by clicking on the hyperlink
by submitting any form
etc.


Http request  --- it is generated by client
Http response---> it is generated by the server to the client



Http request structure:
===================

Http request is generated by the client to the server, this request contains lots of details based on the following structure:-


GET (browser url , clicking on hyperlink)
POST (submiting a form, uploading any file )

Note: for a webapplication we can generate only GET or POST method type request.
whereas for a webservices we can generate GET,POST,PUT,DELETE method type of request.

client-------------------------> server{
	<--------------	cookie 
			   }

http request headers:
---------------------------
the headers are the key-value pair, where key is fixed and value will be changed based on the client request.
--these are the extra information send to the server by the client with the http request.


some of the http request headers are :

1. Date : date and time on which request is made from the client.
2. Host: ipaddress of the client.
3. user-agent: from which browser the client has generated the request.
4.content-type: type of the data coming from the request body (json, txt, xml, pdf, jpg)
5.connection : live or lost
6.cookies: name-value pair text   :- 

we can create our headers also :

Authorization---> jwt token







Http Response Structure:
====================

http response  : this response will come from the server to the client


http response structure:
--------------------------------

webserver will generate the http response for a http request to the client.

http status code:
-----------------------

--by default these status code will be set by the server, or as a developer we can 
also set our desired status code.

100 -- 199  : information 
200 -- 299 : success or OK
300--399 : redirection
400 -499 : incomplete resource / bad request  401: Bad request, 403: forbidden 
500-599 : server-error


---these status code will be used by the client to know the status of their request.


http response headers:
----------------------------

these headers carries some additional information to the client to guide the client
when using or displaying the response.

some of the http response headers are:

server :  
last-modified :  
refresh: 10 
date:
connention: 
content-type: "text/html"  , "application/json", "application/pdf" ,"application/xml"
set-cookie : 
etc..



sending data to the server along with http request:
=====================================

--from the browser we send the request using either GET or POST 

GET:
--by typing in the URL 
--clicking on hyperlink 
--by clicking on button 

POST: 

--by submitting the form
--if we try to upload any file

****--Using GET also we can send the data, if we send the data using 
GET method, that data will travel through url.
where as if we send the data using POST method then that data 
will travel using Http request body.

In Webapplication we use GET or POST method to send the request.

whereas In Webservices we can send following types of request also.
PUT
DELETE



1. request parameter: (name-value pair)  (GET/DELETE/POST/PUT)

/index.jsp?roll=100&name=Ram&marks=800         // here 3 request parameters are there

query string (uri along with the request parameters)

2.path parameter / path variable : it does not have the key  (GET/PUT/POST/DELETE)

/index.jsp/123/ram

3.by using request body:  (POST/PUT)

jsondata 

{
"roll": 123,
"name": "Ram",
"marks": 800
}


xmldata

<student>
<roll>123</roll>
<name>Ram</name>
<marks>800</marks>
</student>

formdata:

--by submitting the form page or uploading any file(POST/ PUT)



Spring MVC:
===========

****In Spring Boot, rest api development will work based on Spring MVC architecture.


if we develop a webapplication according to the mvc architecture manually, we need to develop Servlet class, jsp file and all the flow control logic manually.

Spring f/w provides Spring-web-mvc module to simplify the manual mvc application development.
in which , Spring mvc module provides a predefined Servlet class with predefined flow control logic , ie. DispatcherServlet class.

Spring Boot:
==========

--it is a spring platform that mainly focus on convenstion over configuration.

--It is not a f/w s/w, it is just a spring application development platform which 
provides RAD(Rapid Application development) feature to the Spring f/w.

--Spring boot support auto-configuration.

--it provides integrated tomcat server, so we can develop webapplication/webservices without installing WebServer.




--with the help of Spring boot, we can develop normal java application,  WA, WS, microservices , Spring cloud based application very easily.


Apache : tomcat server



Spring : java based application framework

Spring Core: base module of Spring f/w (IOC container , DI)

Spring-MVC : It is a spring module to develop java based WA/WS (simplify the 
process by providing DispatcherServlet class with predefined flow control).

Spring Boot: It is a platform which simplify the Spring application development 
--it provides integrated tomcat server. as well as it configures DispatcherServlet internally





Normal Webapplication with MVC:
---------------------------------------------
-- need to create servlet class, need to maintain flow controll logic manually, need to create JSP, and other SL + DAL and some configuation files + installing the webserver s/w and deploy our application to the webserver s/w.

With Spring-mvc:
----------------------

-- need not create servlet class, need not maintain flow controll logic manually, becoz DispatcherServlet is given by the Spring-Mvc module. need to create JSP, and other SL + DAL and some configuation files(here we need to configure the DispatcherServlet class ) + installing the webserver s/w and deploy our application to the webserver s/w.


Spring Boot:
-----------------

-- need not create servlet class, need not maintain flow controll logic manually, becoz DispatcherServlet is given by the Spring-Mvc module. need to create JSP, and other SL + DAL and need not create any configuation file to configure the DispatcherServlet class + no need to install the webserver s/w and deploy our application to the webserver s/w.



There are various ways to use spring boot to develop a Spring application:
-----------------------------------------------------------------------------------------


1. installing STS

2.Installing STS plugin in another IDE 

3.by using Spring initializer website

4 by using maven or graddle application

5 using command line



javax.persistence.Entity  : java communiti of Enterprise edition

Spring boot 3.x onwards, Java has given the Enterprise edition to a open source source community i.e Jakarta

jakarta.persistence.Entity



using STS :--

Developing a simple Spring application using Spring Boot in STS:
==================================================


@SpringBootApplication
// @Configuration  + @ComponentScan + @EnableAutoConfiguration

--here @ComponentScan base package will be the package inside this annotation annotated class is there.



Webservices:
===========

--A Service that can be accesed over the web is known as webservice.

--WA can also be accessed over the web but there r some diff :-

1.WA are meant for end-user and to be accessed by browser in human readable form.
whereas WS r meant for application to access the raw data in form of json,xml, plain text,etc.

2.A WA can accesss the WS to get some data or to perform some task whereas WS can not access the WA to get some data.

3.A Single WS can be used by diff kind of applications (developed in any technologies like Java, .Net, Python, PHP, ) whereas WA is not meant for reusablity.



WS r categorised in 2 category:
---------------------------------------
1. SOAP based WS
2.Restfull WS.


1. SOAP based WS: (Simple Object Access Protocol)
========================================

--it is a xml based protocol, to communicate bt client application to the server application, since it is xml based , it is also platform and language independent.

<student>
<roll>100</roll>
<name>Ram</name>
<marks>850</marks>
</student>

WSDL file (it is also an xml file in which we describe all the services which we expose to the client)

--creating a WS using SOAP are heavy weight application, becoz apart from creating the WS classes (actual service) there is a need to create some extra binding classes to parse the xml and convert them in java object.
and vice-versa, and moreever to expose and consume the webservices we need to generate some xml file (WSDL file) which little complex file.

--in order to make WS as light weight, another architectural style is defined named as REST (Representational State Transfer)


--This REST architectural style tells that create a WS with the requeired operations/functionalities and expose them through the Http protocol . and allow them to be accessed by the client with the help of Http protocol without any extra binding classes and any xml files.


--based on this architectural style sun-microsystem has released JAX-RS api for 
creating and consuming the RESTfull webservices.

--this JAX-RS api has diff implementaions are there (Jersey, RestEasy)




Rules to make a java class as Restfull WS:
================================
JAX-RS  api -----> Jersey, RestEasy  


--in restfull ws, A WS class is called as "rootresource" class and each method (service) of that class is called as "resource".

1. each resource (method/service) of a ws class should contain an addressable uri, that can be accessed by http protocol.

2. while exposing the Restfull WS we need to take the support the Http protocol methods:

ex:

GET: if we want to create a service that returns some info/data to the client then we define that service and expose that service with the help GET method of Http protocol.

POST: getting/accepting  the data from the client and stroing or inserting the data to the server. 

PUT : getting/accepting some data from the client and update the existing data.

DELETE : to delete some information from the server side.


3. every restfull service class must be public and it must contains zero argument constructor.

4.webservice method should consume or return the data in the form of following format.


text/plain
application/xml
application/json   -- mosty used type








--to make a java class as a Restfull WS, we need to use JAX-RS api and one of its implementation (jersey, RestEasy) , outside of Spring environment.

--Spring f/w itself has provided its own api with the implementation to make a Spring bean (Controller class, the class which is annotated with @Controller annotation) as a restfull WS class.


***Spring MVC- provides a DispatcherServlet (predefined servlet with all the flow control logic), but without Spring boot, if we try to create a Spring-mvc project then developer need to configure this DispatcherServlet inside thier application.

--but with the Spring Boot, DispatcherServlet is already configured as a front controller of our application.
furthur more Spring boot also provides integrated tomcat server to deploy our application.


Steps to develop Spring Boot Restfull WS :
===================================

step1: create a new spring starter project:

step2: add the "spring-web" dependencies from next screen.

****Note: this web-dependency will integrate embedded tomcat server + predefined autoconfigured DispatcherServlet class.

Note: tomcat server run on the default port 8080



--8080 is a common port, it is recomended to change this port number before starting our application.

go to the application.properties file:

server.port=8888


MyController.java:
------------------------

package com.masai.app.controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller
public class MyController {


	@RequestMapping("/hello")
	@ResponseBody
	public String sayHello() {
		return "Welcome to Spring boot";
		//by default this retuned value will be 
		//treated as logical name of physical jsp name
	}
	
	
}


http://localhost:8888/hello

type of the request : http request
request method: GET
request uri : /hello





Note: by default returned value from the @RequestMapping 
annotated method will be treated as logical name of physical JSP file.
but in order to tell the Spring Boot, treat the returned value as raw data 
then we need to make use of @ResponseBody annotation.

